/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_GETWORK_H_
#define JSONRPC_CPP_STUB_GETWORK_H_

#include <jsonrpccpp/client.h>
#include <string>
#include <primitives/solution.h>
#include "common/Log.h"

class JsonrpcGetwork
{
public:
    JsonrpcGetwork(jsonrpc::IClientConnector* conn, const std::string& coinbaseAddress)
        : m_coinbaseAddress(coinbaseAddress)
    {
        this->m_client = new jsonrpc::Client(*conn, jsonrpc::JSONRPC_CLIENT_V1);
    }

    Json::Value getBlockTemplate() throw (jsonrpc::JsonRpcException)
    {
        auto params = Json::Value(Json::arrayValue);
        auto object = Json::Value(Json::objectValue);
        object["capabilities"] = Json::Value(Json::arrayValue);
        object["capabilities"].append("coinbasetxn");
        object["capabilities"].append("coinbasevalue");
        object["capabilities"].append("longpoll");
        object["capabilities"].append("workid");
        params.append(object);

        Json::Value result = this->m_client->CallMethod("getblocktemplate", params);
        if (result.isObject() ) {
            return result;
        } else {
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
    }

    energi::Work getWork()
    {
        auto workGBT = getBlockTemplate();
        return energi::Work(workGBT, m_coinbaseAddress);
    }

    bool submitWork(const energi::Solution &solution)
    {
        Json::Value params(Json::arrayValue);
        auto result1 = solution.getSubmitBlockData();
        params.append(result1);
        Json::Value result = this->m_client->CallMethod("submitblock", params);
        auto resultStr = result.toStyledString();
        resultStr.pop_back(); // includes a newline
        if (resultStr == "null") {
            cnote << "Block Accepted";
        } else if (resultStr == "inconclusive") {
            cnote << "Block too old";
        } else {
            cnote << "Block Rejected:" << resultStr;
        }
        return resultStr == "null";
    }

    ~JsonrpcGetwork()
    {
        delete m_client;
        m_client = nullptr;
    }

private:
    std::string m_coinbaseAddress;
	jsonrpc::Client* m_client;
};

#endif //JSONRPC_CPP_STUB_GETWORK_H_
